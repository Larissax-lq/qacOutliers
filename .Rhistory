stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
outliers <- outliers_mad(data)
# Display the outliers
if (length(outliers) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(outliers)
}
}
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_outliers_mad(data)
# Example usage
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_outliers_mad(data)
Explanation
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_outliers_mad(data)
Explanation
# Load the Routliers package
library(Routliers)
# Define a function to find outliers using outliers_mad
find_outliers_mad <- function(data) {
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
outliers <- outliers_mad(data)
# Display the outliers
if (length(outliers) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(outliers)
}
}
# Example usage
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_outliers_mad(data)
library(Routliers)
data(Attacks)
res1 = outliers_mad(Attacks$age)
View(res1)
print(res1)
View(Attacks)
plot_outliers_mad(res1, Attacks, pos_display = FALSE)
plot_outliers_mad(res1, Attacks$age, pos_display = FALSE)
library(Routliers)
# Define a function to find and plot outliers using outliers_mad
find_and_plot_outliers_mad <- function(data) {
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data)
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data, pos_display = FALSE)
}
# Example usage
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_and_plot_outliers_mad(data)
data2 <- Attacks$age
find_and_plot_outliers_mad(data2)
# Example usage
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_and_plot_outliers_mad(data)
# Example usage
data2 <- Attacks$age
find_and_plot_outliers_mad(data2)
library(Routliers)
cars <- data(mtcars)
View(mtcars)
find_and_plot_outliers_mad(cars$mpg)
# Define a function to find and plot outliers using outliers_mad
find_and_plot_outliers_mad <- function(data) {
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data)
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data, pos_display = FALSE)
}
find_and_plot_outliers_mad(cars$mpg)
mpg_vector <- cars$mpg
mpg_vector <- mtcars$mpg
find_and_plot_outliers_mad(mpg_vector)
cars <- data(mtcars)
disp_vector <- mtcars$disp
find_and_plot_outliers_mad(disp_vector)
# Example usage
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_and_plot_outliers_mad(data)
# Example usage
data2 <- Attacks$age
find_and_plot_outliers_mad(data2)
find_and_plot_outliers_mad(mtcars)
# Define a function to find and plot outliers using outliers_mad
find_and_plot_outliers_mad <- function(data, column) {
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data$column)
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data, pos_display = FALSE)
}
find_and_plot_outliers_mad(mtcars, mpg)
find_and_plot_outliers_mad <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data) || !column %in% names(data)) {
stop("Data must be a data frame and contain the specified column.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data[[column]], pos_display = FALSE)
}
find_and_plot_outliers_mad(mtcars, mpg)
cars <- data(mtcars)
find_and_plot_outliers_mad(cars, mpg)
find_and_plot_outliers_mad(mtcars, mpg)
find_and_plot_outliers_mad(mtcars, "mpg")
find_and_plot_outliers_mad(Attacks, "age")
find_and_plot_outliers_mad <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data[[column]], pos_display = FALSE)
}
find_and_plot_outliers_mad(mtcars, "mpg")
find_and_plot_outliers_mad(Attacks, "age")
library(Routliers)
find_and_plot_outliers_mad <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data[[column]], pos_display = FALSE)
}
#Example usage
data(mtcars)
find_and_plot_outliers_mad(mtcars, "mpg")
find_and_plot_outliers_mad(Attacks, "age")
find_and_plot_outliers_mad2 <- function(data, column = NULL) {
# Check if the data is a data frame
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
# Get numeric columns
numeric_cols <- sapply(data, is.numeric)
# If a column is specified, check that it exists and is numeric
if (!is.null(column)) {
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
columns_to_check <- column
} else {
# If no column is specified, check all numeric columns
columns_to_check <- names(data)[numeric_cols]
if (length(columns_to_check) == 0) {
stop("No numeric columns found in the data frame.")
}
}
# Iterate over each column to check for outliers
outliers_list <- list()
for (col in columns_to_check) {
# Use the outliers_mad function to find outliers
outliers <- outliers_mad(data[[col]])
# Store the outliers if any are found
if (length(outliers) > 0) {
outlier_rows <- which(data[[col]] %in% outliers)
outliers_list[[col]] <- list(values = outliers, rows = outlier_rows)
# Display the outliers
cat("\nOutliers detected in column:", col, "\n")
cat("Outlier values and corresponding row numbers:\n")
for (i in seq_along(outliers)) {
cat("Value:", outliers[i], "| Row:", outlier_rows[i], "\n")
}
}
}
# Plot the outliers if plot() is called
if (length(outliers_list) > 0) {
plot <- function() {
for (col in names(outliers_list)) {
plot_outliers_mad(outliers_list[[col]]$values, data[[col]], pos_display = FALSE)
}
}
return(invisible(list(outliers = outliers_list, plot = plot)))
} else {
cat("No outliers detected in the data.\n")
}
}
find_and_plot_outliers_mad2(Attacks, "age")
find_and_plot_outliers_mad2 <- function(data, column = NULL) {
# Check if the data is a data frame
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
# Get numeric columns
numeric_cols <- sapply(data, is.numeric)
# If a column is specified, check that it exists and is numeric
if (!is.null(column)) {
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
columns_to_check <- column
} else {
# If no column is specified, check all numeric columns
columns_to_check <- names(data)[numeric_cols]
if (length(columns_to_check) == 0) {
stop("No numeric columns found in the data frame.")
}
}
# Iterate over each column to check for outliers
outliers_list <- list()
for (col in columns_to_check) {
# Use the outliers_mad function to find outliers
outliers <- outliers_mad(data[[col]])
# Store the outliers if any are found
if (length(outliers) > 0) {
outlier_rows <- which(data[[col]] %in% outliers)
outliers_list[[col]] <- list(values = outliers, rows = outlier_rows)
# Display the outliers
cat("\nOutliers detected in column:", col, "\n")
cat("Outlier values and corresponding row numbers:\n")
for (i in seq_along(outliers)) {
cat("Value:", as.character(outliers[i]), "| Row:", as.character(outlier_rows[i]), "\n")
}
}
}
# Plot the outliers if plot() is called
if (length(outliers_list) > 0) {
plot <- function() {
for (col in names(outliers_list)) {
plot_outliers_mad(outliers_list[[col]]$values, data[[col]], pos_display = FALSE)
}
}
return(invisible(list(outliers = outliers_list, plot = plot)))
} else {
cat("No outliers detected in the data.\n")
}
}
find_and_plot_outliers_mad2(Attacks, "age")
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), color = "red", size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad2(Attacks, "age")
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), color = "red", size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad2(Attacks, "age")
find_and_plot_outliers_mad2(mtcars, "mpg")
find_and_plot_outliers_mad3(Attacks, "age")
library(ggplot2)
library(dplyr)
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), color = "red", size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad3(Attacks, "age")
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), color = "red", size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad3(Attacks, "age")
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), color = "red", size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad3(Attacks, "age")
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad3(Attacks, "age")
