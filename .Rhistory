setwd("/Users/braedenfalzarano/Documents/class/qac356_advanced_R/ClassProject")
usethis::create_package("qacTeam")
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
if (length(avg_knn_distances) == 0) {
stop("Error: avg_knn_distances is empty.")
}
else{
if (method == "kNN") {
if (!is.matrix(data)) {
data <- as.matrix(data)
}
threshold <- 0.95
k <- 5
# Calculate pairwise distances
dist_matrix <- as.matrix(dist(data))
# Get k-nearest neighbors for each point (excluding self-distance of 0)
knn_scores <- apply(dist_matrix, 1, function(row) {
sort(row, partial = k + 1)[2:(k + 1)]
})
# Calculate the average distance to the k-nearest neighbors
avg_knn_distances <- rowMeans(knn_scores)
if (length(avg_knn_distances) == 0) {
stop("Error: avg_knn_distances is empty.")
}
# Determine the outliers based on the threshold
cutoff <- quantile(avg_knn_distances, threshold)
outliers <- which(avg_knn_distances > cutoff)
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
}
else {
multiOutliers <- function(data, x, y, method="mahalanobis", ...){
#add other methods as people finish them here
if(method=="LoF"){
# Check if data is a matrix or data frame and convert if necessary
if (!is.matrix(data) && !is.data.frame(data)) {
stop("Data should be a matrix or data frame.")
}
# Rmove any non numeric data
data <- data[sapply(data, is.numeric)]
# Check if there are enough points for the LOF calculation
if (nrow(data) <= minPts) {
stop("Number of data points must be greater than minPts.")
}
# Calculate the LoF scores
lof_scores <- dbscan::lof(data, minPts = minPts)
# Append the LOF scores as a new column in the data frame
data_with_lof <- data.frame(ID = 1:nrow(data), data, LOF_Score = lof_scores)
# Return the data frame with IDs, original data, and LOF scores
return(data_with_lof)
}
if(method=="mahalanobis"){
#create error messaging here for non-numeric variables
#select just the rows given by the user
subset <- select(data, {{x}}, {{y}})
#make this into a matrix
mat <- as.matrix(subset)
#run matrix on function and store results
results <- outliers_mahalanobis(x=mat)
print(results)
}
if (method == "kNN") {
if (!is.matrix(data)) {
data <- as.matrix(data)
}
threshold <- 0.95
k <- 5
# Calculate pairwise distances
dist_matrix <- as.matrix(dist(data))
# Get k-nearest neighbors for each point (excluding self-distance of 0)
knn_scores <- apply(dist_matrix, 1, function(row) {
sort(row, partial = k + 1)[2:(k + 1)]
})
# Calculate the average distance to the k-nearest neighbors
avg_knn_distances <- rowMeans(knn_scores)
if (length(avg_knn_distances) == 0) {
stop("Error: avg_knn_distances is empty.")
}
# Determine the outliers based on the threshold
cutoff <- quantile(avg_knn_distances, threshold)
outliers <- which(avg_knn_distances > cutoff)
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
}
else {
stop("Method supplied must be kNN, mahalanobis, iForest, or LoF.")
}
}
multiOutliers <- function(data, x, y, method="mahalanobis", ...){
#add other methods as people finish them here
if(method=="LoF"){
# Check if data is a matrix or data frame and convert if necessary
if (!is.matrix(data) && !is.data.frame(data)) {
stop("Data should be a matrix or data frame.")
}
# Rmove any non numeric data
data <- data[sapply(data, is.numeric)]
# Check if there are enough points for the LOF calculation
if (nrow(data) <= minPts) {
stop("Number of data points must be greater than minPts.")
}
# Calculate the LoF scores
lof_scores <- dbscan::lof(data, minPts = minPts)
# Append the LOF scores as a new column in the data frame
data_with_lof <- data.frame(ID = 1:nrow(data), data, LOF_Score = lof_scores)
# Return the data frame with IDs, original data, and LOF scores
return(data_with_lof)
}
if(method=="mahalanobis"){
#create error messaging here for non-numeric variables
#select just the rows given by the user
subset <- select(data, {{x}}, {{y}})
#make this into a matrix
mat <- as.matrix(subset)
#run matrix on function and store results
results <- outliers_mahalanobis(x=mat)
print(results)
}
if (method == "kNN") {
if (!is.matrix(data)) {
data <- as.matrix(data)
}
threshold <- 0.95
k <- 5
# Calculate pairwise distances
dist_matrix <- as.matrix(dist(data))
# Get k-nearest neighbors for each point (excluding self-distance of 0)
knn_scores <- apply(dist_matrix, 1, function(row) {
sort(row, partial = k + 1)[2:(k + 1)]
})
# Calculate the average distance to the k-nearest neighbors
avg_knn_distances <- rowMeans(knn_scores)
if (length(avg_knn_distances) == 0) {
stop("Error: avg_knn_distances is empty.")
}
# Determine the outliers based on the threshold
cutoff <- quantile(avg_knn_distances, threshold)
outliers <- which(avg_knn_distances > cutoff)
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
}
else {
stop("Method supplied must be kNN, mahalanobis, iForest, or LoF.")
}
}
multiOutliers <- function(data, x, y, method="mahalanobis", ...){
#add other methods as people finish them here
if(method=="LoF"){
# Check if data is a matrix or data frame and convert if necessary
if (!is.matrix(data) && !is.data.frame(data)) {
stop("Data should be a matrix or data frame.")
}
# Rmove any non numeric data
data <- data[sapply(data, is.numeric)]
# Check if there are enough points for the LOF calculation
if (nrow(data) <= minPts) {
stop("Number of data points must be greater than minPts.")
}
# Calculate the LoF scores
lof_scores <- dbscan::lof(data, minPts = minPts)
# Append the LOF scores as a new column in the data frame
data_with_lof <- data.frame(ID = 1:nrow(data), data, LOF_Score = lof_scores)
# Return the data frame with IDs, original data, and LOF scores
return(data_with_lof)
}
if(method=="mahalanobis"){
#create error messaging here for non-numeric variables
#select just the rows given by the user
subset <- select(data, {{x}}, {{y}})
#make this into a matrix
mat <- as.matrix(subset)
#run matrix on function and store results
results <- outliers_mahalanobis(x=mat)
print(results)
}
if (method == "kNN") {
if (!is.matrix(data)) {
data <- as.matrix(data)
}
threshold <- 0.95
k <- 5
# Calculate pairwise distances
dist_matrix <- as.matrix(dist(data))
# Get k-nearest neighbors for each point (excluding self-distance of 0)
knn_scores <- apply(dist_matrix, 1, function(row) {
sort(row, partial = k + 1)[2:(k + 1)]
})
# Calculate the average distance to the k-nearest neighbors
avg_knn_distances <- rowMeans(knn_scores)
# Determine the outliers based on the threshold
cutoff <- quantile(avg_knn_distances, threshold)
outliers <- which(avg_knn_distances > cutoff)
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
}
else {
stop("Method supplied must be kNN, mahalanobis, iForest, or LoF.")
}
}
multiOutliers(mtcars, method = "kNN")
multiOutliers(mtcars, method = "mahalanobis")
multiOutliers(mtcars, method = "mahalanobis")
multiOutliers(mtcars, method = "kNN")
multiOutliers <- function(data, x, y, method="mahalanobis", k = 0.5, threshold = 0.95,...){
#add other methods as people finish them here
if(method=="LoF"){
# Check if data is a matrix or data frame and convert if necessary
if (!is.matrix(data) && !is.data.frame(data)) {
stop("Data should be a matrix or data frame.")
}
# Rmove any non numeric data
data <- data[sapply(data, is.numeric)]
# Check if there are enough points for the LOF calculation
if (nrow(data) <= minPts) {
stop("Number of data points must be greater than minPts.")
}
# Calculate the LoF scores
lof_scores <- dbscan::lof(data, minPts = minPts)
# Append the LOF scores as a new column in the data frame
data_with_lof <- data.frame(ID = 1:nrow(data), data, LOF_Score = lof_scores)
# Return the data frame with IDs, original data, and LOF scores
return(data_with_lof)
}
if(method=="mahalanobis"){
library(dplyr)
library(Routliers)
#create error messaging here for non-numeric variables
xname <- as.character(substitute(x))
yname <- as.character(substitute(y))
if(class(data[[xname]])!="numeric" | class(data[[yname]])!="numeric"){
stop("Data must be numeric")
}
#select just the rows given by the user
subset <- select(data, {{x}}, {{y}})
#make this into a matrix
mat <- as.matrix(subset)
#run matrix on function and store results
results <- outliers_mahalanobis(x=mat)
print(results)
}
if (method == "kNN") {
if (!is.matrix(data)) {
data <- as.matrix(data)
}
# Calculate pairwise distances
dist_matrix <- as.matrix(dist(data))
# Get k-nearest neighbors for each point (excluding self-distance of 0)
knn_scores <- apply(dist_matrix, 1, function(row) {
sort(row, partial = k + 1)[2:(k + 1)]
})
# Calculate the average distance to the k-nearest neighbors
avg_knn_distances <- rowMeans(knn_scores)
# Determine the outliers based on the threshold
cutoff <- quantile(avg_knn_distances, threshold)
outliers <- which(avg_knn_distances > cutoff)
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
}
else {
stop("Method supplied must be kNN, mahalanobis, iForest, or LoF.")
}
}
?cli
o <- multiOutliers(mtcars, method = "kNN", threshold = 0.9, k = 5)
print(oi)
print(o)
o <- multiOutliers(mtcars, method = "kNN", threshold = 0.9, k = 5)
print(o)
print.multioutliers(o)
