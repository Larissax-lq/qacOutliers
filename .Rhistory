<<<<<<< HEAD
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
outliers <- outliers_mad(data)
# Display the outliers
if (length(outliers) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(outliers)
}
}
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_outliers_mad(data)
# Example usage
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_outliers_mad(data)
Explanation
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_outliers_mad(data)
Explanation
# Load the Routliers package
library(Routliers)
# Define a function to find outliers using outliers_mad
find_outliers_mad <- function(data) {
=======
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected for", column, "\n")
} else {
cat("Outliers detected for", column, ":\n")
print(res1)
}
}
}
}
univOutliers(mtcars, "mpg", method="boxplot")
univOutliers(mtcars, "hp", method="boxplot")
univOutliers <- function(data, x = NULL, method = "boxplot") {
# Ensure the method is either "boxplot" or "mad"
if (!(method %in% c("boxplot", "mad"))) {
stop("Method must be either 'boxplot' or 'mad'.")
}
# Identify numeric columns in the dataset
numeric_columns <- sapply(data, is.numeric)
# If 'x' is not specified, use all numeric columns
if (is.null(x)) {
x <- names(data)[numeric_columns]
} else {
if (!x %in% names(data)) stop(paste("The specified column", x, "does not exist in the data frame."))
x <- list(x)  # Convert to a list for uniform processing
}
# Loop through each numeric variable specified in 'x'
for (column in x) {
# Boxplot Method
if (method == "boxplot") {
# Calculate boxplot stats using base R
stats <- boxplot.stats(data[[column]])
# Check if outliers exist
if (length(stats$out) == 0) {
cat("No univariate outliers detected for", column, "\n")
} else {
cat("Outliers detected for", column, ":\n")
# Print outliers with their corresponding row numbers
outlier_rows <- which(data[[column]] %in% stats$out)
for (i in outlier_rows) {
cat("Row", i, ":", data[[column]][i], "\n")
}
}
# Create the ggplot boxplot (optional, only for visualization)
library(ggplot2)
p <- ggplot(data, aes_string(y = column)) +
geom_boxplot(outlier.colour = "red", coef = 1.58) +
ggtitle(paste("Univariate Boxplot of", column)) +
theme_minimal()
print(p)
}
if(method=="mad"){
library(Routliers)
>>>>>>> upstream/main
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
<<<<<<< HEAD
outliers <- outliers_mad(data)
# Display the outliers
if (length(outliers) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(outliers)
}
}
# Example usage
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_outliers_mad(data)
library(Routliers)
data(Attacks)
res1 = outliers_mad(Attacks$age)
View(res1)
print(res1)
View(Attacks)
plot_outliers_mad(res1, Attacks, pos_display = FALSE)
plot_outliers_mad(res1, Attacks$age, pos_display = FALSE)
library(Routliers)
# Define a function to find and plot outliers using outliers_mad
find_and_plot_outliers_mad <- function(data) {
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data)
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data, pos_display = FALSE)
}
# Example usage
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_and_plot_outliers_mad(data)
data2 <- Attacks$age
find_and_plot_outliers_mad(data2)
# Example usage
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_and_plot_outliers_mad(data)
# Example usage
data2 <- Attacks$age
find_and_plot_outliers_mad(data2)
library(Routliers)
cars <- data(mtcars)
View(mtcars)
find_and_plot_outliers_mad(cars$mpg)
# Define a function to find and plot outliers using outliers_mad
find_and_plot_outliers_mad <- function(data) {
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data)
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data, pos_display = FALSE)
}
find_and_plot_outliers_mad(cars$mpg)
mpg_vector <- cars$mpg
mpg_vector <- mtcars$mpg
find_and_plot_outliers_mad(mpg_vector)
cars <- data(mtcars)
disp_vector <- mtcars$disp
find_and_plot_outliers_mad(disp_vector)
# Example usage
data <- c(10, 12, 10, 11, 13, 100, 10, 9, 11) # Example data
find_and_plot_outliers_mad(data)
# Example usage
data2 <- Attacks$age
find_and_plot_outliers_mad(data2)
find_and_plot_outliers_mad(mtcars)
# Define a function to find and plot outliers using outliers_mad
find_and_plot_outliers_mad <- function(data, column) {
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data$column)
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data, pos_display = FALSE)
}
find_and_plot_outliers_mad(mtcars, mpg)
find_and_plot_outliers_mad <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data) || !column %in% names(data)) {
stop("Data must be a data frame and contain the specified column.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data[[column]], pos_display = FALSE)
}
find_and_plot_outliers_mad(mtcars, mpg)
cars <- data(mtcars)
find_and_plot_outliers_mad(cars, mpg)
find_and_plot_outliers_mad(mtcars, mpg)
find_and_plot_outliers_mad(mtcars, "mpg")
find_and_plot_outliers_mad(Attacks, "age")
find_and_plot_outliers_mad <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data[[column]], pos_display = FALSE)
}
find_and_plot_outliers_mad(mtcars, "mpg")
find_and_plot_outliers_mad(Attacks, "age")
library(Routliers)
find_and_plot_outliers_mad <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the outliers using plot_outliers_mad
plot_outliers_mad(res1, data[[column]], pos_display = FALSE)
}
#Example usage
data(mtcars)
find_and_plot_outliers_mad(mtcars, "mpg")
find_and_plot_outliers_mad(Attacks, "age")
find_and_plot_outliers_mad2 <- function(data, column = NULL) {
# Check if the data is a data frame
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
# Get numeric columns
numeric_cols <- sapply(data, is.numeric)
# If a column is specified, check that it exists and is numeric
if (!is.null(column)) {
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
columns_to_check <- column
} else {
# If no column is specified, check all numeric columns
columns_to_check <- names(data)[numeric_cols]
if (length(columns_to_check) == 0) {
stop("No numeric columns found in the data frame.")
}
}
# Iterate over each column to check for outliers
outliers_list <- list()
for (col in columns_to_check) {
# Use the outliers_mad function to find outliers
outliers <- outliers_mad(data[[col]])
# Store the outliers if any are found
if (length(outliers) > 0) {
outlier_rows <- which(data[[col]] %in% outliers)
outliers_list[[col]] <- list(values = outliers, rows = outlier_rows)
# Display the outliers
cat("\nOutliers detected in column:", col, "\n")
cat("Outlier values and corresponding row numbers:\n")
for (i in seq_along(outliers)) {
cat("Value:", outliers[i], "| Row:", outlier_rows[i], "\n")
}
}
}
# Plot the outliers if plot() is called
if (length(outliers_list) > 0) {
plot <- function() {
for (col in names(outliers_list)) {
plot_outliers_mad(outliers_list[[col]]$values, data[[col]], pos_display = FALSE)
}
}
return(invisible(list(outliers = outliers_list, plot = plot)))
} else {
cat("No outliers detected in the data.\n")
}
}
find_and_plot_outliers_mad2(Attacks, "age")
find_and_plot_outliers_mad2 <- function(data, column = NULL) {
# Check if the data is a data frame
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
# Get numeric columns
numeric_cols <- sapply(data, is.numeric)
# If a column is specified, check that it exists and is numeric
if (!is.null(column)) {
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
columns_to_check <- column
} else {
# If no column is specified, check all numeric columns
columns_to_check <- names(data)[numeric_cols]
if (length(columns_to_check) == 0) {
stop("No numeric columns found in the data frame.")
}
}
# Iterate over each column to check for outliers
outliers_list <- list()
for (col in columns_to_check) {
# Use the outliers_mad function to find outliers
outliers <- outliers_mad(data[[col]])
# Store the outliers if any are found
if (length(outliers) > 0) {
outlier_rows <- which(data[[col]] %in% outliers)
outliers_list[[col]] <- list(values = outliers, rows = outlier_rows)
# Display the outliers
cat("\nOutliers detected in column:", col, "\n")
cat("Outlier values and corresponding row numbers:\n")
for (i in seq_along(outliers)) {
cat("Value:", as.character(outliers[i]), "| Row:", as.character(outlier_rows[i]), "\n")
}
}
}
# Plot the outliers if plot() is called
if (length(outliers_list) > 0) {
plot <- function() {
for (col in names(outliers_list)) {
plot_outliers_mad(outliers_list[[col]]$values, data[[col]], pos_display = FALSE)
}
}
return(invisible(list(outliers = outliers_list, plot = plot)))
} else {
cat("No outliers detected in the data.\n")
}
}
find_and_plot_outliers_mad2(Attacks, "age")
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), color = "red", size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad2(Attacks, "age")
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), color = "red", size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad2(Attacks, "age")
find_and_plot_outliers_mad2(mtcars, "mpg")
find_and_plot_outliers_mad3(Attacks, "age")
library(ggplot2)
library(dplyr)
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
=======
res1 <- outliers_mad(data)
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
}
}
univOutliers <- function(data, x = NULL, method = "boxplot") {
# Ensure the method is either "boxplot" or "mad"
if (!(method %in% c("boxplot", "mad"))) {
stop("Method must be either 'boxplot' or 'mad'.")
}
# Identify numeric columns in the dataset
numeric_columns <- sapply(data, is.numeric)
# If 'x' is not specified, use all numeric columns
if (is.null(x)) {
x <- names(data)[numeric_columns]
} else {
if (!x %in% names(data)) stop(paste("The specified column", x, "does not exist in the data frame."))
x <- list(x)  # Convert to a list for uniform processing
}
# Loop through each numeric variable specified in 'x'
for (column in x) {
# Boxplot Method
if (method == "boxplot") {
# Calculate boxplot stats using base R
stats <- boxplot.stats(data[[column]])
# Check if outliers exist
if (length(stats$out) == 0) {
cat("No univariate outliers detected for", column, "\n")
} else {
cat("Outliers detected for", column, ":\n")
# Print outliers with their corresponding row numbers
outlier_rows <- which(data[[column]] %in% stats$out)
for (i in outlier_rows) {
cat("Row", i, ":", data[[column]][i], "\n")
}
}
# Create the ggplot boxplot (optional, only for visualization)
library(ggplot2)
p <- ggplot(data, aes_string(y = column)) +
geom_boxplot(outlier.colour = "red", coef = 1.58) +
ggtitle(paste("Univariate Boxplot of", column)) +
theme_minimal()
print(p)
}
if(method=="mad"){
library(Routliers)
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data)
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
}
}}
univOutliers(mtcars, "hp", method="boxplot")
univOutliers(mtcars, "mpg", method="boxplot")
univOutliers <- function(data, x = NULL, method = "boxplot") {
# Identify numeric columns in the dataset
numeric_columns <- sapply(data, is.numeric)
# If 'x' is not specified, use all numeric columns
if (is.null(x)) {
x <- names(data)[numeric_columns]
} else {
if (!x %in% names(data)) stop(paste("The specified column", x, "does not exist in the data frame."))
x <- list(x)  # Convert to a list for uniform processing
}
# Loop through each numeric variable specified in 'x'
for (column in x) {
# Boxplot Method
if (method == "boxplot") {
# Calculate boxplot stats using base R
stats <- boxplot.stats(data[[column]])
# Check if outliers exist
if (length(stats$out) == 0) {
cat("No univariate outliers detected for", column, "\n")
} else {
cat("Outliers detected for", column, ":\n")
# Print outliers with their corresponding row numbers
outlier_rows <- which(data[[column]] %in% stats$out)
for (i in outlier_rows) {
cat("Row", i, ":", data[[column]][i], "\n")
}
}
# Create the ggplot boxplot (optional, only for visualization)
library(ggplot2)
p <- ggplot(data, aes_string(y = column)) +
geom_boxplot(outlier.colour = "red", coef = 1.58) +
ggtitle(paste("Univariate Boxplot of", column)) +
theme_minimal()
print(p)
}
if(method=="mad"){
library(Routliers)
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data)
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
}
}}
univOutliers(mtcars, "mpg", method="boxplot")
univOutliers(mtcars, "hp", method="boxplot")
univOutliers(mtcars, method="boxplot")
=======
setwd("/Users/braedenfalzarano/Documents/class/qac356_advanced_R/ClassProject")
usethis::create_package("qacTeam")
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
if (length(avg_knn_distances) == 0) {
stop("Error: avg_knn_distances is empty.")
}
else{
if (method == "kNN") {
if (!is.matrix(data)) {
data <- as.matrix(data)
}
threshold <- 0.95
k <- 5
# Calculate pairwise distances
dist_matrix <- as.matrix(dist(data))
# Get k-nearest neighbors for each point (excluding self-distance of 0)
knn_scores <- apply(dist_matrix, 1, function(row) {
sort(row, partial = k + 1)[2:(k + 1)]
})
# Calculate the average distance to the k-nearest neighbors
avg_knn_distances <- rowMeans(knn_scores)
if (length(avg_knn_distances) == 0) {
stop("Error: avg_knn_distances is empty.")
}
# Determine the outliers based on the threshold
cutoff <- quantile(avg_knn_distances, threshold)
outliers <- which(avg_knn_distances > cutoff)
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
}
else {
multiOutliers <- function(data, x, y, method="mahalanobis", ...){
#add other methods as people finish them here
if(method=="LoF"){
# Check if data is a matrix or data frame and convert if necessary
if (!is.matrix(data) && !is.data.frame(data)) {
stop("Data should be a matrix or data frame.")
}
# Rmove any non numeric data
data <- data[sapply(data, is.numeric)]
# Check if there are enough points for the LOF calculation
if (nrow(data) <= minPts) {
stop("Number of data points must be greater than minPts.")
}
# Calculate the LoF scores
lof_scores <- dbscan::lof(data, minPts = minPts)
# Append the LOF scores as a new column in the data frame
data_with_lof <- data.frame(ID = 1:nrow(data), data, LOF_Score = lof_scores)
# Return the data frame with IDs, original data, and LOF scores
return(data_with_lof)
}
if(method=="mahalanobis"){
#create error messaging here for non-numeric variables
#select just the rows given by the user
subset <- select(data, {{x}}, {{y}})
#make this into a matrix
mat <- as.matrix(subset)
#run matrix on function and store results
results <- outliers_mahalanobis(x=mat)
print(results)
}
if (method == "kNN") {
if (!is.matrix(data)) {
data <- as.matrix(data)
}
threshold <- 0.95
k <- 5
# Calculate pairwise distances
dist_matrix <- as.matrix(dist(data))
# Get k-nearest neighbors for each point (excluding self-distance of 0)
knn_scores <- apply(dist_matrix, 1, function(row) {
sort(row, partial = k + 1)[2:(k + 1)]
})
# Calculate the average distance to the k-nearest neighbors
avg_knn_distances <- rowMeans(knn_scores)
if (length(avg_knn_distances) == 0) {
stop("Error: avg_knn_distances is empty.")
}
# Determine the outliers based on the threshold
cutoff <- quantile(avg_knn_distances, threshold)
outliers <- which(avg_knn_distances > cutoff)
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
}
else {
stop("Method supplied must be kNN, mahalanobis, iForest, or LoF.")
}
}
multiOutliers <- function(data, x, y, method="mahalanobis", ...){
#add other methods as people finish them here
if(method=="LoF"){
# Check if data is a matrix or data frame and convert if necessary
if (!is.matrix(data) && !is.data.frame(data)) {
stop("Data should be a matrix or data frame.")
}
# Rmove any non numeric data
data <- data[sapply(data, is.numeric)]
# Check if there are enough points for the LOF calculation
if (nrow(data) <= minPts) {
stop("Number of data points must be greater than minPts.")
}
# Calculate the LoF scores
lof_scores <- dbscan::lof(data, minPts = minPts)
# Append the LOF scores as a new column in the data frame
data_with_lof <- data.frame(ID = 1:nrow(data), data, LOF_Score = lof_scores)
# Return the data frame with IDs, original data, and LOF scores
return(data_with_lof)
}
if(method=="mahalanobis"){
#create error messaging here for non-numeric variables
#select just the rows given by the user
subset <- select(data, {{x}}, {{y}})
#make this into a matrix
mat <- as.matrix(subset)
#run matrix on function and store results
results <- outliers_mahalanobis(x=mat)
print(results)
}
if (method == "kNN") {
if (!is.matrix(data)) {
data <- as.matrix(data)
}
threshold <- 0.95
k <- 5
# Calculate pairwise distances
dist_matrix <- as.matrix(dist(data))
# Get k-nearest neighbors for each point (excluding self-distance of 0)
knn_scores <- apply(dist_matrix, 1, function(row) {
sort(row, partial = k + 1)[2:(k + 1)]
})
# Calculate the average distance to the k-nearest neighbors
avg_knn_distances <- rowMeans(knn_scores)
if (length(avg_knn_distances) == 0) {
stop("Error: avg_knn_distances is empty.")
}
# Determine the outliers based on the threshold
cutoff <- quantile(avg_knn_distances, threshold)
outliers <- which(avg_knn_distances > cutoff)
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
}
else {
stop("Method supplied must be kNN, mahalanobis, iForest, or LoF.")
}
}
multiOutliers <- function(data, x, y, method="mahalanobis", ...){
#add other methods as people finish them here
if(method=="LoF"){
# Check if data is a matrix or data frame and convert if necessary
if (!is.matrix(data) && !is.data.frame(data)) {
stop("Data should be a matrix or data frame.")
}
# Rmove any non numeric data
data <- data[sapply(data, is.numeric)]
# Check if there are enough points for the LOF calculation
if (nrow(data) <= minPts) {
stop("Number of data points must be greater than minPts.")
}
# Calculate the LoF scores
lof_scores <- dbscan::lof(data, minPts = minPts)
# Append the LOF scores as a new column in the data frame
data_with_lof <- data.frame(ID = 1:nrow(data), data, LOF_Score = lof_scores)
# Return the data frame with IDs, original data, and LOF scores
return(data_with_lof)
}
if(method=="mahalanobis"){
#create error messaging here for non-numeric variables
#select just the rows given by the user
subset <- select(data, {{x}}, {{y}})
#make this into a matrix
mat <- as.matrix(subset)
#run matrix on function and store results
results <- outliers_mahalanobis(x=mat)
print(results)
}
if (method == "kNN") {
if (!is.matrix(data)) {
data <- as.matrix(data)
}
threshold <- 0.95
k <- 5
# Calculate pairwise distances
dist_matrix <- as.matrix(dist(data))
# Get k-nearest neighbors for each point (excluding self-distance of 0)
knn_scores <- apply(dist_matrix, 1, function(row) {
sort(row, partial = k + 1)[2:(k + 1)]
})
# Calculate the average distance to the k-nearest neighbors
avg_knn_distances <- rowMeans(knn_scores)
# Determine the outliers based on the threshold
cutoff <- quantile(avg_knn_distances, threshold)
outliers <- which(avg_knn_distances > cutoff)
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
}
else {
stop("Method supplied must be kNN, mahalanobis, iForest, or LoF.")
}
}
multiOutliers(mtcars, method = "kNN")
multiOutliers(mtcars, method = "mahalanobis")
multiOutliers(mtcars, method = "mahalanobis")
multiOutliers(mtcars, method = "kNN")
multiOutliers <- function(data, x, y, method="mahalanobis", k = 0.5, threshold = 0.95,...){
#add other methods as people finish them here
if(method=="LoF"){
# Check if data is a matrix or data frame and convert if necessary
if (!is.matrix(data) && !is.data.frame(data)) {
stop("Data should be a matrix or data frame.")
}
# Rmove any non numeric data
data <- data[sapply(data, is.numeric)]
# Check if there are enough points for the LOF calculation
if (nrow(data) <= minPts) {
stop("Number of data points must be greater than minPts.")
}
# Calculate the LoF scores
lof_scores <- dbscan::lof(data, minPts = minPts)
# Append the LOF scores as a new column in the data frame
data_with_lof <- data.frame(ID = 1:nrow(data), data, LOF_Score = lof_scores)
# Return the data frame with IDs, original data, and LOF scores
return(data_with_lof)
}
if(method=="mahalanobis"){
library(dplyr)
library(Routliers)
#create error messaging here for non-numeric variables
xname <- as.character(substitute(x))
yname <- as.character(substitute(y))
if(class(data[[xname]])!="numeric" | class(data[[yname]])!="numeric"){
stop("Data must be numeric")
}
#select just the rows given by the user
subset <- select(data, {{x}}, {{y}})
#make this into a matrix
mat <- as.matrix(subset)
#run matrix on function and store results
results <- outliers_mahalanobis(x=mat)
print(results)
}
if (method == "kNN") {
if (!is.matrix(data)) {
data <- as.matrix(data)
}
# Calculate pairwise distances
dist_matrix <- as.matrix(dist(data))
# Get k-nearest neighbors for each point (excluding self-distance of 0)
knn_scores <- apply(dist_matrix, 1, function(row) {
sort(row, partial = k + 1)[2:(k + 1)]
})
# Calculate the average distance to the k-nearest neighbors
avg_knn_distances <- rowMeans(knn_scores)
# Determine the outliers based on the threshold
cutoff <- quantile(avg_knn_distances, threshold)
outliers <- which(avg_knn_distances > cutoff)
# Return results
return(list(outliers = outliers, scores = avg_knn_distances))
}
else {
stop("Method supplied must be kNN, mahalanobis, iForest, or LoF.")
}
}
?cli
o <- multiOutliers(mtcars, method = "kNN", threshold = 0.9, k = 5)
print(oi)
print(o)
o <- multiOutliers(mtcars, method = "kNN", threshold = 0.9, k = 5)
print(o)
print.multioutliers(o)
>>>>>>> upstream/main
univOutliers <- function(data, x = NULL, method = "boxplot") {
# Identify numeric columns in the dataset
numeric_columns <- sapply(data, is.numeric)
# If 'x' is not specified, use all numeric columns
if (is.null(x)) {
x <- names(data)[numeric_columns]
} else {
if (!x %in% names(data)) stop(paste("The specified column", x, "does not exist in the data frame."))
x <- list(x)
}
# Loop through each numeric variable specified in 'x'
for (column in x) {
# Boxplot Method
if (method == "boxplot") {
# Calculate boxplot stats using base R
stats <- boxplot.stats(data[[column]])
# Check if outliers exist
if (length(stats$out) == 0) {
cat("No univariate outliers detected for", column, "\n")
} else {
cat("Outliers detected for", column, ":\n")
# Print outliers with their corresponding row numbers
outlier_rows <- which(data[[column]] %in% stats$out)
for (i in outlier_rows) {
cat("Row", i, ":", data[[column]][i], "\n")
}
}
# Create the ggplot boxplot (optional, only for visualization)
library(ggplot2)
p <- ggplot(data, aes_string(y = column)) +
geom_boxplot(outlier.colour = "red", coef = 1.58) +
ggtitle(paste("Univariate Boxplot of", column)) +
theme_minimal()
print(p)
}
if(method=="mad"){
library(Routliers)
# Check if the input data is numeric
if (!is.numeric(data)) {
stop("Input data must be numeric.")
}
# Use the outliers_mad function to find outliers
res1 <- outliers_mad(data)
>>>>>>> upstream/main
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
<<<<<<< HEAD
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), color = "red", size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad3(Attacks, "age")
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), color = "red", size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad3(Attacks, "age")
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), color = "red", size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad3(Attacks, "age")
find_and_plot_outliers_mad3 <- function(data, column) {
# Check if the data is a data frame and column exists in the data
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
if (!column %in% colnames(data)) {
stop("Specified column not found in the data frame.")
}
# Check if the specified column is numeric
if (!is.numeric(data[[column]])) {
stop("The specified column must be numeric.")
}
# Find outliers using the MAD (Median Absolute Deviation) method
res1 <- outliers_mad(data[[column]])
# Display the outliers
if (length(res1) == 0) {
cat("No outliers detected in the data.\n")
} else {
cat("Outliers detected:\n")
print(res1)
}
# Plot the data with outliers highlighted
data <- data %>%
mutate(is_outlier = data[[column]] %in% res1)
ggplot(data, aes_string(x = column)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_point(data = subset(data, is_outlier), aes_string(y = 0), size = 3) +
labs(title = paste("Outliers in", column), x = column, y = "Frequency") +
theme_minimal()
}
find_and_plot_outliers_mad3(Attacks, "age")
=======
}
}
}
univOutliers(mtcars, "mpg", method="boxplot")
univOutliers(mtcars, "hp", method="boxplot")
univOutliers(mtcars, "mpg", method="boxplot")
>>>>>>> upstream/main
